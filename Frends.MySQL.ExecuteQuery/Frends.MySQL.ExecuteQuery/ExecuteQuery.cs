using Frends.MySQL.ExecuteQuery.Definitions;
using MySqlConnector;
using Newtonsoft.Json.Linq;
using System;
using System.ComponentModel;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.MySQL.ExecuteQuery;

/// <summary>
/// MySQL ExecuteQuery task.
/// </summary>
public class MySQL
{
    /// <summary>
    /// Execute queries against the MySql database and return result of query in JToken.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.MySQL.ExecuteQuery)
    /// </summary>
    /// <param name="query">Query parameters</param>
    /// <param name="options">Options parameters</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, JToken ResultJtoken }</returns>
    public static async Task<Result> ExecuteQuery([PropertyTab] QueryInput query, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        try
        {
            using var conn = new MySqlConnection(query.ConnectionString);
            await conn.OpenAsync(cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();

            using var command = new MySqlCommand();
            command.Connection = conn;
            command.CommandType = command.CommandType;
            command.CommandText = query.CommandText;
            if (query.Parameters != null)
            {
                command.CreateParameter();
                foreach (var parameter in query.Parameters)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    command.Parameters.Add(parameter.Name, parameter.Value);
                }
            }
            command.CommandTimeout = command.CommandTimeout;

            if (query.CommandText.ToString().ToLower().Contains("select"))
            {
                var isolationLevel = options.MySqlTransactionIsolationLevel switch
                {
                    MySqlTransactionIsolationLevel.ReadCommitted => IsolationLevel.ReadCommitted,
                    MySqlTransactionIsolationLevel.ReadUncommitted => IsolationLevel.ReadUncommitted,
                    MySqlTransactionIsolationLevel.RepeatableRead => IsolationLevel.RepeatableRead,
                    MySqlTransactionIsolationLevel.Serializable => IsolationLevel.Serializable,
                    _ => IsolationLevel.RepeatableRead,
                };

                using var transaction = await conn.BeginTransactionAsync(isolationLevel, cancellationToken);
                command.Transaction = transaction;

                using DataTable data = new();
                using MySqlDataAdapter adapter = new (command);
                adapter.Fill(data);

                return new Result(true, JToken.FromObject(data));
            }
            else
            {
                var result = await command.ExecuteNonQueryAsync(cancellationToken);
                return new Result(true, JToken.FromObject(result));
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    } 
}