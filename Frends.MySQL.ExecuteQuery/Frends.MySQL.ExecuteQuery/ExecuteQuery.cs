using Frends.MySQL.ExecuteQuery.Definitions;
using MySqlConnector;
using Newtonsoft.Json.Linq;
using System;
using System.ComponentModel;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.MySQL.ExecuteQuery;

/// <summary>
/// MySQL ExecuteQuery task.
/// </summary>
public class MySQL
{
    /// <summary>
    /// Execute queries against the MySql database and return result of query in JToken.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.MySQL.ExecuteQuery)
    /// </summary>
    /// <param name="query">Query parameters</param>
    /// <param name="options">Options parameters</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, JToken ResultJtoken }</returns>
    public static async Task<Result> ExecuteQuery([PropertyTab] QueryInput query, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        var scalarReturnQueries = new[] { "update ", "insert ", "drop ", "truncate ", "create ", "alter " };

        try
        {
            using var conn = new MySqlConnection(query.ConnectionString);
            await conn.OpenAsync(cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();

            var isolationLevel = options.MySqlTransactionIsolationLevel switch
            {
                MySqlTransactionIsolationLevel.ReadCommitted => IsolationLevel.ReadCommitted,
                MySqlTransactionIsolationLevel.ReadUncommitted => IsolationLevel.ReadUncommitted,
                MySqlTransactionIsolationLevel.RepeatableRead => IsolationLevel.RepeatableRead,
                MySqlTransactionIsolationLevel.Serializable => IsolationLevel.Serializable,
                _ => IsolationLevel.RepeatableRead,
            };

            /*if (scalarReturnQueries.Any(query.CommandText.TrimStart().ToLower().Contains))
            {
                // scalar return
                using var trans = conn.BeginTransaction(isolationLevel);
                try
                {
                    var affectedRows = await conn.ExecuteAsync(query.CommandText, parameterObject, trans, command.CommandTimeout, command.CommandType);
                    trans.Commit();
                    return new Result(true, "Success", JToken.FromObject(affectedRows));
                }
                catch (Exception ex)
                {
                    trans.Rollback();
                    trans.Dispose();
                    return new Result(false, $"Error while commiting query {query.CommandText}: {ex}", null);
                }
            }*/

            using var transaction = await conn.BeginTransactionAsync(cancellationToken).ConfigureAwait(false);
            using var command = new MySqlCommand();
            command.Connection = conn;
            command.Transaction = transaction;
            command.CommandType = command.CommandType;
            command.CommandText = query.CommandText;
            if (query.Parameters != null)
            {
                var parameters = command.CreateParameter();
                foreach (var parameter in query.Parameters)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    command.Parameters.Add(parameter.Name, parameter.Value);
                }
            }
            command.CommandTimeout = command.CommandTimeout;

            DataTable data = new ();
            MySqlDataAdapter adapter = new MySqlDataAdapter(command);
            adapter.Fill(data);

            return new Result(true, JToken.FromObject(data));
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    } 
}